---
- name: Provision and configure Minecraft server
  hosts: mc
  become: true

  pre_tasks:
    - name: Ensure Python3 is installed (so Ansible modules work)
      raw: |
        apt-get update -qq
        DEBIAN_FRONTEND=noninteractive apt-get install -y -qq python3 python3-apt
      changed_when: false

    - name: Tell Ansible to use Python3
      set_fact:
        ansible_python_interpreter: /usr/bin/python3

  vars:
    mc_version: "1.21.5"
    mc_hash:    "e6ec2f64e6080b9b5d9b471b291c33cc7f509733"
    mc_dir:     /opt/minecraft
    corretto_url: "https://corretto.aws/downloads/latest/amazon-corretto-21-x64-linux-jdk.tar.gz"
    corretto_archive: "/tmp/amazon-corretto-21.tar.gz"
    corretto_install_dir: "/usr/lib/jvm/java-21-amazon-corretto"

  tasks:
    # - name: Ensure apt cache is up to date
    #   ansible.builtin.apt:
    #     update_cache: yes
    #     cache_valid_time: 3600


  - name: Install curl, wget, tar via raw apt-get
    raw: |
      apt-get update -qq
      DEBIAN_FRONTEND=noninteractive apt-get install -y -qq curl wget tar
    changed_when: false

  - name: Download Amazon Corretto 21 tarball via raw wget
    raw: |
      wget -4 --tries=3 --timeout=30 -O "{{ corretto_archive }}" "{{ corretto_url }}"
    args:
      creates: "{{ corretto_archive }}"
    changed_when: false


  - name: Ensure Corretto install directory exists
    file:
      path: "{{ corretto_install_dir }}"
      state: directory
      mode: '0755'

  - name: Extract Corretto JDK
    unarchive:
      src: "{{ corretto_archive }}"
      dest: "{{ corretto_install_dir }}"
      remote_src: yes
      extra_opts:
        - --strip-components=1

  - name: Register java alternative for Corretto 21
    alternatives:
      name: java
      path: "{{ corretto_install_dir }}/bin/java"
      link: /usr/bin/java
      priority: 210

    # 6) Create the Minecraft directory
  - name: Create Minecraft directory
    ansible.builtin.file:
      path: "{{ mc_dir }}"
      state: directory
      owner: ubuntu
      group: ubuntu
      mode: '0755'

  # 7) Download the Minecraft server jar
  - name: Download Minecraft {{ mc_version }} server jar
    ansible.builtin.get_url:
      url: "https://piston-data.mojang.com/v1/objects/{{ mc_hash }}/server.jar"
      dest: "{{ mc_dir }}/minecraft_server.{{ mc_version }}.jar"
      mode: '0755'
      owner: ubuntu
      group: ubuntu

  # 8) Accept the EULA
  - name: Accept Minecraft EULA
    ansible.builtin.copy:
      dest: "{{ mc_dir }}/eula.txt"
      content: "eula=true\n"
      owner: ubuntu
      group: ubuntu
      mode: '0644'

  # 9) Deploy systemd unit
  - name: Install systemd unit for Minecraft
    ansible.builtin.copy:
      dest: /etc/systemd/system/minecraft.service
      mode: '0644'
      content: |
        [Unit]
        Description=Minecraft Server {{ mc_version }}
        After=network.target

        [Service]
        User=ubuntu
        WorkingDirectory={{ mc_dir }}
        ExecStart={{ corretto_install_dir }}/bin/java -Xms512M -Xmx1024M -jar {{ mc_dir }}/minecraft_server.{{ mc_version }}.jar nogui
        ExecStop=/bin/kill -SIGTERM $MAINPID
        Restart=on-failure
        RestartSec=10

        [Install]
        WantedBy=multi-user.target
    notify: Reload systemd

  # 10) Enable & start the service
  - name: Enable and start Minecraft service
    ansible.builtin.systemd:
      name: minecraft
      enabled: yes
      state: restarted

  handlers:
    - name: Reload systemd
      ansible.builtin.command: systemctl daemon-reload
